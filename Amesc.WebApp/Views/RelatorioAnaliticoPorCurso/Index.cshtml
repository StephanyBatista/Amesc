@model Amesc.Dominio._Consultas.DadosAnaliticosPorCurso
@{
    ViewData["Title"] = "Alunos";
}

<div id="pad-wrapper">

    <div class="row header">
        <div class="col-md-8">
            <h3>Relatório analítico por curso</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <form asp-action="Index" method="get">
                <div class="form-group">
                    <div class="col-md-3">
                        <select class="form-control"
                                name="cursoId"
                                asp-items="@ViewBag.Cursos"></select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-control"
                                name="ano"
                                asp-items="@ViewBag.Anos"></select>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-1">
                        <button class="btn btn-success">Buscar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <div class="row">
        <div class="col-md-5">
            <canvas id="aprovacao"></canvas>
        </div>
        <div class="col-md-5">
            <canvas id="publico"></canvas>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <canvas id="cidade"></canvas>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>
    <script src="https://codepen.io/anon/pen/aWapBE.js"></script>

    <script type="text/javascript">

        $(function() {

            carregarGraficoDeAprovacao();
            carregarGraficoDePublico();
            carregarGraficoDeCidade();
        });

        function carregarGraficoDeAprovacao() {

            const aprovacaoQuantidade = [];
            const aprovacaoNome = [];

            @if (Model != null &&
                 Model.AprovacaoPorCurso != null)
            {
                @:aprovacaoQuantidade.push(@Model?.AprovacaoPorCurso?.QuantidadeDeAprovados);
                @:aprovacaoNome.push('Aprovados');
                @:aprovacaoQuantidade.push(@Model?.AprovacaoPorCurso?.QuantidadeDeReprovados);
                @:aprovacaoNome.push('Reprovados');
                @:aprovacaoQuantidade.push(@Model?.AprovacaoPorCurso?.QuantidadeDeSemNotas);
                @:aprovacaoNome.push('Sem notas');
            }

            const configDeAprovacao = {
                type: 'bar',
                data: {
                    datasets: [{
                        data: aprovacaoQuantidade,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)'
                        ],
                        label: 'Quantidade'
                    }],
                    labels: aprovacaoNome
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Aprovações'
                    },
                    legend: {
                        display: false,
                    }
                }
            };

            const ctxDeAprovacao = document.getElementById('aprovacao').getContext('2d');
            new Chart(ctxDeAprovacao, configDeAprovacao);
        }

        function carregarGraficoDePublico() {
            const publicosQuantidade = [];
            const publicosNome = [];

            @if (Model != null)
            {
                foreach (var publico in Model.PublicoAlvoPorCursos)
                {
                    @:publicosQuantidade.push(@publico.Quantidade);
                    @:publicosNome.push('@Html.Raw(publico.Nome)');
                }
            }

            const configDePublico = {
                type: 'bar',
                data: {
                    datasets: [{
                        data: publicosQuantidade,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)',
                            
                        ],
                        label: 'Quantidade'
                    }],
                    labels: publicosNome
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Publicos'
                    },
                    legend: {
                        display: false,
                    }
                }
            };

            const ctxDePublico = document.getElementById('publico').getContext('2d');
            window.myPie = new Chart(ctxDePublico, configDePublico);
        }

        function carregarGraficoDeCidade() {
            const cidadesQuantidade = [];
            const cidadesNome = [];

            @if (Model != null)
            {
                foreach (var cidade in Model.CidadesDosAlunosPorCursos)
                {
                    @:cidadesQuantidade.push(@cidade.Quantidade);
                    @:cidadesNome.push('@Html.Raw(cidade.Nome)');
                }
            }

            const configDePublico = {
                type: 'bar',
                data: {
                    datasets: [{
                        data: cidadesQuantidade,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)',
                            '##436EEE',
                            '#27408B',
                            '#1E90FF',
                            '#5CACEE',
                            '#00BFFF',
                            '#6CA6CD',
                            '#607B8B',
                            '#E0FFFF',
                            '#00868B',
                            '#7FFFD4',
                            '#00FF7F',
                        ],
                        label: 'Quantidade'
                    }],
                    labels: cidadesNome
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Cidades'
                    },
                    legend: {
                        display: false,
                    }
                }
            };

            const ctxDePublico = document.getElementById('cidade').getContext('2d');
            window.myPie = new Chart(ctxDePublico, configDePublico);
        }

    </script>
}



